//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForMyEventsListerViewModel: JsonConverter<MyEventsListerViewModel>
    {
        private static ReadOnlySpan<byte> CurrentEventsBytes => new byte[13] { (byte)'C', (byte)'u', (byte)'r', (byte)'r', (byte)'e', (byte)'n', (byte)'t', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        private static ReadOnlySpan<byte> FutureEventsBytes => new byte[12] { (byte)'F', (byte)'u', (byte)'t', (byte)'u', (byte)'r', (byte)'e', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        private static ReadOnlySpan<byte> PastEventsBytes => new byte[10] { (byte)'P', (byte)'a', (byte)'s', (byte)'t', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        
        private bool _checkedForListMyEventsListerItemConverter;
        private JsonConverter<List<MyEventsListerItem>> _listMyEventsListerItemConverter;
        private JsonConverter<List<MyEventsListerItem>> GetListMyEventsListerItemConverter(JsonSerializerOptions options)
        {
            if (!_checkedForListMyEventsListerItemConverter && _listMyEventsListerItemConverter == null && options != null)
            {
                _listMyEventsListerItemConverter = (JsonConverter<List<MyEventsListerItem>>)options.GetConverter(typeof(List<MyEventsListerItem>));
                _checkedForListMyEventsListerItemConverter = true;
            }
            
            return _listMyEventsListerItemConverter;
        }
        
        public override MyEventsListerViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            MyEventsListerViewModel value = new MyEventsListerViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'CurrentEvents'.
                if (CurrentEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.CurrentEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.CurrentEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'FutureEvents'.
                else if (FutureEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.FutureEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.FutureEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'PastEvents'.
                else if (PastEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.PastEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.PastEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, MyEventsListerViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(CurrentEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.CurrentEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.CurrentEvents, options);
                }
            }
            
            writer.WritePropertyName(FutureEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.FutureEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.FutureEvents, options);
                }
            }
            
            writer.WritePropertyName(PastEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.PastEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.PastEvents, options);
                }
            }
            
            writer.WriteEndObject();
        }
    }
}
