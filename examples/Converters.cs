//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorBasicPerson: JsonConverter<BasicPerson>
    {
        private bool _checkedForInt32Converter;
        private JsonConverter<Int32> _int32Converter;
        private JsonConverter<Int32> GetInt32Converter(JsonSerializerOptions options)
        {
            if (!_checkedForInt32Converter && _int32Converter == null && options != null)
            {
                _int32Converter = (JsonConverter<Int32>)options.GetConverter(typeof(Int32));
                _checkedForInt32Converter = true;
            }
            
            return _int32Converter;
        }
        
        private bool _checkedForStringConverter;
        private JsonConverter<String> _stringConverter;
        private JsonConverter<String> GetStringConverter(JsonSerializerOptions options)
        {
            if (!_checkedForStringConverter && _stringConverter == null && options != null)
            {
                _stringConverter = (JsonConverter<String>)options.GetConverter(typeof(String));
                _checkedForStringConverter = true;
            }
            
            return _stringConverter;
        }
        
        public override BasicPerson Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPerson value = new JsonConverterGenerator.BasicPerson();
            
            // Read all properties.
            while (true)
            {
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Assuming target is NetCore and we don't need to call .ToArray().
                string stringPropertyName = Encoding.UTF8.GetString(propertyName);
                
                // Try to match property name with object properties (case sensitive).
                if (stringPropertyName == "Age")
                {
                    JsonConverter<Int32> converter = GetInt32Converter(options);
                    if (converter != null)
                    {
                        value.Age = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.Age = JsonSerializer.Deserialize<Int32>(ref reader, options);
                    }
                }
                else if (stringPropertyName == "First")
                {
                    JsonConverter<String> converter = GetStringConverter(options);
                    if (converter != null)
                    {
                        value.First = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.First = JsonSerializer.Deserialize<String>(ref reader, options);
                    }
                }
                else if (stringPropertyName == "Last")
                {
                    JsonConverter<String> converter = GetStringConverter(options);
                    if (converter != null)
                    {
                        value.Last = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.Last = JsonSerializer.Deserialize<String>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPerson value, JsonSerializerOptions options)
        {
            writer.WriteNullValue();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicJsonAddress: JsonConverter<BasicJsonAddress>
    {
        private bool _checkedForStringConverter;
        private JsonConverter<String> _stringConverter;
        private JsonConverter<String> GetStringConverter(JsonSerializerOptions options)
        {
            if (!_checkedForStringConverter && _stringConverter == null && options != null)
            {
                _stringConverter = (JsonConverter<String>)options.GetConverter(typeof(String));
                _checkedForStringConverter = true;
            }
            
            return _stringConverter;
        }
        
        private bool _checkedForInt32Converter;
        private JsonConverter<Int32> _int32Converter;
        private JsonConverter<Int32> GetInt32Converter(JsonSerializerOptions options)
        {
            if (!_checkedForInt32Converter && _int32Converter == null && options != null)
            {
                _int32Converter = (JsonConverter<Int32>)options.GetConverter(typeof(Int32));
                _checkedForInt32Converter = true;
            }
            
            return _int32Converter;
        }
        
        public override BasicJsonAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicJsonAddress value = new JsonConverterGenerator.BasicJsonAddress();
            
            // Read all properties.
            while (true)
            {
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Assuming target is NetCore and we don't need to call .ToArray().
                string stringPropertyName = Encoding.UTF8.GetString(propertyName);
                
                // Try to match property name with object properties (case sensitive).
                if (stringPropertyName == "Street")
                {
                    JsonConverter<String> converter = GetStringConverter(options);
                    if (converter != null)
                    {
                        value.Street = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.Street = JsonSerializer.Deserialize<String>(ref reader, options);
                    }
                }
                else if (stringPropertyName == "City")
                {
                    JsonConverter<String> converter = GetStringConverter(options);
                    if (converter != null)
                    {
                        value.City = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.City = JsonSerializer.Deserialize<String>(ref reader, options);
                    }
                }
                else if (stringPropertyName == "Zip")
                {
                    JsonConverter<Int32> converter = GetInt32Converter(options);
                    if (converter != null)
                    {
                        value.Zip = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.Zip = JsonSerializer.Deserialize<Int32>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicJsonAddress value, JsonSerializerOptions options)
        {
            writer.WriteNullValue();
        }
    }
}
