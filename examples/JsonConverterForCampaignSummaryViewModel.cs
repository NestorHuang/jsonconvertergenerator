//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForCampaignSummaryViewModel : JsonConverter<CampaignSummaryViewModel>
    {
        private JsonConverterForCampaignSummaryViewModel() {}
        
        public static readonly JsonConverterForCampaignSummaryViewModel Instance = new JsonConverterForCampaignSummaryViewModel();
        
        private static ReadOnlySpan<byte> IdBytes => new byte[2] { (byte)'I', (byte)'d' };
        private static ReadOnlySpan<byte> TitleBytes => new byte[5] { (byte)'T', (byte)'i', (byte)'t', (byte)'l', (byte)'e' };
        private static ReadOnlySpan<byte> DescriptionBytes => new byte[11] { (byte)'D', (byte)'e', (byte)'s', (byte)'c', (byte)'r', (byte)'i', (byte)'p', (byte)'t', (byte)'i', (byte)'o', (byte)'n' };
        private static ReadOnlySpan<byte> ImageUrlBytes => new byte[8] { (byte)'I', (byte)'m', (byte)'a', (byte)'g', (byte)'e', (byte)'U', (byte)'r', (byte)'l' };
        private static ReadOnlySpan<byte> OrganizationNameBytes => new byte[16] { (byte)'O', (byte)'r', (byte)'g', (byte)'a', (byte)'n', (byte)'i', (byte)'z', (byte)'a', (byte)'t', (byte)'i', (byte)'o', (byte)'n', (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> HeadlineBytes => new byte[8] { (byte)'H', (byte)'e', (byte)'a', (byte)'d', (byte)'l', (byte)'i', (byte)'n', (byte)'e' };
        
        public override CampaignSummaryViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            CampaignSummaryViewModel value = new CampaignSummaryViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Id'.
                if (IdBytes.SequenceEqual(propertyName))
                {
                    value.Id = reader.GetInt32();
                }
                // Determine if JSON property matches 'Title'.
                else if (TitleBytes.SequenceEqual(propertyName))
                {
                    value.Title = reader.GetString();
                }
                // Determine if JSON property matches 'Description'.
                else if (DescriptionBytes.SequenceEqual(propertyName))
                {
                    value.Description = reader.GetString();
                }
                // Determine if JSON property matches 'ImageUrl'.
                else if (ImageUrlBytes.SequenceEqual(propertyName))
                {
                    value.ImageUrl = reader.GetString();
                }
                // Determine if JSON property matches 'OrganizationName'.
                else if (OrganizationNameBytes.SequenceEqual(propertyName))
                {
                    value.OrganizationName = reader.GetString();
                }
                // Determine if JSON property matches 'Headline'.
                else if (HeadlineBytes.SequenceEqual(propertyName))
                {
                    value.Headline = reader.GetString();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, CampaignSummaryViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(IdBytes, value.Id);
            
            writer.WriteString(TitleBytes, value.Title);
            
            writer.WriteString(DescriptionBytes, value.Description);
            
            writer.WriteString(ImageUrlBytes, value.ImageUrl);
            
            writer.WriteString(OrganizationNameBytes, value.OrganizationName);
            
            writer.WriteString(HeadlineBytes, value.Headline);
            
            writer.WriteEndObject();
        }
    }
}
