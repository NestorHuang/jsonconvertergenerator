//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForMyEventsListerItem : JsonConverter<MyEventsListerItem>
    {
        private JsonConverterForMyEventsListerItem() {}
        
        public static readonly JsonConverterForMyEventsListerItem Instance = new JsonConverterForMyEventsListerItem();
        
        private static ReadOnlySpan<byte> EventIdBytes => new byte[7] { (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'I', (byte)'d' };
        private static ReadOnlySpan<byte> EventNameBytes => new byte[9] { (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> StartDateBytes => new byte[9] { (byte)'S', (byte)'t', (byte)'a', (byte)'r', (byte)'t', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        private static ReadOnlySpan<byte> EndDateBytes => new byte[7] { (byte)'E', (byte)'n', (byte)'d', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        private static ReadOnlySpan<byte> TimeZoneBytes => new byte[8] { (byte)'T', (byte)'i', (byte)'m', (byte)'e', (byte)'Z', (byte)'o', (byte)'n', (byte)'e' };
        private static ReadOnlySpan<byte> CampaignBytes => new byte[8] { (byte)'C', (byte)'a', (byte)'m', (byte)'p', (byte)'a', (byte)'i', (byte)'g', (byte)'n' };
        private static ReadOnlySpan<byte> OrganizationBytes => new byte[12] { (byte)'O', (byte)'r', (byte)'g', (byte)'a', (byte)'n', (byte)'i', (byte)'z', (byte)'a', (byte)'t', (byte)'i', (byte)'o', (byte)'n' };
        private static ReadOnlySpan<byte> VolunteerCountBytes => new byte[14] { (byte)'V', (byte)'o', (byte)'l', (byte)'u', (byte)'n', (byte)'t', (byte)'e', (byte)'e', (byte)'r', (byte)'C', (byte)'o', (byte)'u', (byte)'n', (byte)'t' };
        private static ReadOnlySpan<byte> TasksBytes => new byte[5] { (byte)'T', (byte)'a', (byte)'s', (byte)'k', (byte)'s' };
        
        public override MyEventsListerItem Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            MyEventsListerItem value = new MyEventsListerItem();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'EventId'.
                if (EventIdBytes.SequenceEqual(propertyName))
                {
                    value.EventId = reader.GetInt32();
                }
                // Determine if JSON property matches 'EventName'.
                else if (EventNameBytes.SequenceEqual(propertyName))
                {
                    value.EventName = reader.GetString();
                }
                // Determine if JSON property matches 'StartDate'.
                else if (StartDateBytes.SequenceEqual(propertyName))
                {
                    value.StartDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'EndDate'.
                else if (EndDateBytes.SequenceEqual(propertyName))
                {
                    value.EndDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'TimeZone'.
                else if (TimeZoneBytes.SequenceEqual(propertyName))
                {
                    value.TimeZone = reader.GetString();
                }
                // Determine if JSON property matches 'Campaign'.
                else if (CampaignBytes.SequenceEqual(propertyName))
                {
                    value.Campaign = reader.GetString();
                }
                // Determine if JSON property matches 'Organization'.
                else if (OrganizationBytes.SequenceEqual(propertyName))
                {
                    value.Organization = reader.GetString();
                }
                // Determine if JSON property matches 'VolunteerCount'.
                else if (VolunteerCountBytes.SequenceEqual(propertyName))
                {
                    value.VolunteerCount = reader.GetInt32();
                }
                // Determine if JSON property matches 'Tasks'.
                else if (TasksBytes.SequenceEqual(propertyName))
                {
                    value.Tasks = JsonConverterForListMyEventsListerItemTask.Instance.Read(ref reader, typeToConvert, options);
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, MyEventsListerItem value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(EventIdBytes, value.EventId);
            
            writer.WriteString(EventNameBytes, value.EventName);
            
            writer.WriteString(StartDateBytes, value.StartDate);
            
            writer.WriteString(EndDateBytes, value.EndDate);
            
            writer.WriteString(TimeZoneBytes, value.TimeZone);
            
            writer.WriteString(CampaignBytes, value.Campaign);
            
            writer.WriteString(OrganizationBytes, value.Organization);
            
            writer.WriteNumber(VolunteerCountBytes, value.VolunteerCount);
            
            writer.WritePropertyName(TasksBytes);
            JsonConverterForListMyEventsListerItemTask.Instance.Write(writer, value.Tasks, options);
            
            writer.WriteEndObject();
        }
    }
}
