//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Buffers.Text;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorBasicPerson: JsonConverter<BasicPerson>
    {
        public override BasicPerson Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPerson value = new JsonConverterGenerator.BasicPerson();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Assuming target is NetCore and we don't need to call .ToArray().
                string stringPropertyName = Encoding.UTF8.GetString(propertyName);
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                if (stringPropertyName == "Age")
                {
                    if (Utf8Parser.TryParse(propertyName, out int tmp, out int bytesConsumed) && propertyName.Length == bytesConsumed)
                    {
                        value.Age = tmp;
                    }
                    else
                    {
                        throw new JsonException();
                    }
                }
                else if (stringPropertyName == "First")
                {
                    value.First = reader.GetString();
                }
                else if (stringPropertyName == "Last")
                {
                    value.Last = reader.GetString();
                }
                else if (stringPropertyName == "MiddleInitial")
                {
                    string tmp = reader.GetString();
                    if (string.IsNullOrEmpty(tmp))
                    {
                        throw new JsonException();
                    }
                    
                    value.MiddleInitial = tmp[0];
                }
                else if (stringPropertyName == "BirthDate")
                {
                    value.BirthDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPerson value, JsonSerializerOptions options)
        {
            writer.WriteNullValue();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicJsonAddress: JsonConverter<BasicJsonAddress>
    {
        public override BasicJsonAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicJsonAddress value = new JsonConverterGenerator.BasicJsonAddress();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Assuming target is NetCore and we don't need to call .ToArray().
                string stringPropertyName = Encoding.UTF8.GetString(propertyName);
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                if (stringPropertyName == "Street")
                {
                    value.Street = reader.GetString();
                }
                else if (stringPropertyName == "City")
                {
                    value.City = reader.GetString();
                }
                else if (stringPropertyName == "Zip")
                {
                    if (Utf8Parser.TryParse(propertyName, out int tmp, out int bytesConsumed) && propertyName.Length == bytesConsumed)
                    {
                        value.Zip = tmp;
                    }
                    else
                    {
                        throw new JsonException();
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicJsonAddress value, JsonSerializerOptions options)
        {
            writer.WriteNullValue();
        }
    }
}
