//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorLoginViewModel: JsonConverter<LoginViewModel>
    {
        private static ReadOnlySpan<byte> EmailBytes => new byte[5] { (byte)'E', (byte)'m', (byte)'a', (byte)'i', (byte)'l' };
        private static ReadOnlySpan<byte> PasswordBytes => new byte[8] { (byte)'P', (byte)'a', (byte)'s', (byte)'s', (byte)'w', (byte)'o', (byte)'r', (byte)'d' };
        private static ReadOnlySpan<byte> RememberMeBytes => new byte[10] { (byte)'R', (byte)'e', (byte)'m', (byte)'e', (byte)'m', (byte)'b', (byte)'e', (byte)'r', (byte)'M', (byte)'e' };
        
        public override LoginViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.LoginViewModel value = new JsonConverterGenerator.LoginViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Email'.
                if (EmailBytes.SequenceEqual(propertyName))
                {
                    value.Email = reader.GetString();
                }
                // Determine if JSON property matches 'Password'.
                else if (PasswordBytes.SequenceEqual(propertyName))
                {
                    value.Password = reader.GetString();
                }
                // Determine if JSON property matches 'RememberMe'.
                else if (RememberMeBytes.SequenceEqual(propertyName))
                {
                    value.RememberMe = reader.GetBoolean();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, LoginViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteString(EmailBytes, value.Email);
            
            writer.WriteString(PasswordBytes, value.Password);
            
            writer.WriteBoolean(RememberMeBytes, value.RememberMe);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorLocation: JsonConverter<Location>
    {
        private static ReadOnlySpan<byte> IdBytes => new byte[2] { (byte)'I', (byte)'d' };
        private static ReadOnlySpan<byte> Address1Bytes => new byte[8] { (byte)'A', (byte)'d', (byte)'d', (byte)'r', (byte)'e', (byte)'s', (byte)'s', (byte)'1' };
        private static ReadOnlySpan<byte> Address2Bytes => new byte[8] { (byte)'A', (byte)'d', (byte)'d', (byte)'r', (byte)'e', (byte)'s', (byte)'s', (byte)'2' };
        private static ReadOnlySpan<byte> CityBytes => new byte[4] { (byte)'C', (byte)'i', (byte)'t', (byte)'y' };
        private static ReadOnlySpan<byte> StateBytes => new byte[5] { (byte)'S', (byte)'t', (byte)'a', (byte)'t', (byte)'e' };
        private static ReadOnlySpan<byte> PostalCodeBytes => new byte[10] { (byte)'P', (byte)'o', (byte)'s', (byte)'t', (byte)'a', (byte)'l', (byte)'C', (byte)'o', (byte)'d', (byte)'e' };
        private static ReadOnlySpan<byte> NameBytes => new byte[4] { (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> PhoneNumberBytes => new byte[11] { (byte)'P', (byte)'h', (byte)'o', (byte)'n', (byte)'e', (byte)'N', (byte)'u', (byte)'m', (byte)'b', (byte)'e', (byte)'r' };
        private static ReadOnlySpan<byte> CountryBytes => new byte[7] { (byte)'C', (byte)'o', (byte)'u', (byte)'n', (byte)'t', (byte)'r', (byte)'y' };
        
        public override Location Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.Location value = new JsonConverterGenerator.Location();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Id'.
                if (IdBytes.SequenceEqual(propertyName))
                {
                    value.Id = reader.GetInt32();
                }
                // Determine if JSON property matches 'Address1'.
                else if (Address1Bytes.SequenceEqual(propertyName))
                {
                    value.Address1 = reader.GetString();
                }
                // Determine if JSON property matches 'Address2'.
                else if (Address2Bytes.SequenceEqual(propertyName))
                {
                    value.Address2 = reader.GetString();
                }
                // Determine if JSON property matches 'City'.
                else if (CityBytes.SequenceEqual(propertyName))
                {
                    value.City = reader.GetString();
                }
                // Determine if JSON property matches 'State'.
                else if (StateBytes.SequenceEqual(propertyName))
                {
                    value.State = reader.GetString();
                }
                // Determine if JSON property matches 'PostalCode'.
                else if (PostalCodeBytes.SequenceEqual(propertyName))
                {
                    value.PostalCode = reader.GetString();
                }
                // Determine if JSON property matches 'Name'.
                else if (NameBytes.SequenceEqual(propertyName))
                {
                    value.Name = reader.GetString();
                }
                // Determine if JSON property matches 'PhoneNumber'.
                else if (PhoneNumberBytes.SequenceEqual(propertyName))
                {
                    value.PhoneNumber = reader.GetString();
                }
                // Determine if JSON property matches 'Country'.
                else if (CountryBytes.SequenceEqual(propertyName))
                {
                    value.Country = reader.GetString();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, Location value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(IdBytes, value.Id);
            
            writer.WriteString(Address1Bytes, value.Address1);
            
            writer.WriteString(Address2Bytes, value.Address2);
            
            writer.WriteString(CityBytes, value.City);
            
            writer.WriteString(StateBytes, value.State);
            
            writer.WriteString(PostalCodeBytes, value.PostalCode);
            
            writer.WriteString(NameBytes, value.Name);
            
            writer.WriteString(PhoneNumberBytes, value.PhoneNumber);
            
            writer.WriteString(CountryBytes, value.Country);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorIndexViewModel: JsonConverter<IndexViewModel>
    {
        private static ReadOnlySpan<byte> ActiveOrUpcomingEventsBytes => new byte[22] { (byte)'A', (byte)'c', (byte)'t', (byte)'i', (byte)'v', (byte)'e', (byte)'O', (byte)'r', (byte)'U', (byte)'p', (byte)'c', (byte)'o', (byte)'m', (byte)'i', (byte)'n', (byte)'g', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        private static ReadOnlySpan<byte> FeaturedCampaignBytes => new byte[16] { (byte)'F', (byte)'e', (byte)'a', (byte)'t', (byte)'u', (byte)'r', (byte)'e', (byte)'d', (byte)'C', (byte)'a', (byte)'m', (byte)'p', (byte)'a', (byte)'i', (byte)'g', (byte)'n' };
        private static ReadOnlySpan<byte> IsNewAccountBytes => new byte[12] { (byte)'I', (byte)'s', (byte)'N', (byte)'e', (byte)'w', (byte)'A', (byte)'c', (byte)'c', (byte)'o', (byte)'u', (byte)'n', (byte)'t' };
        private static ReadOnlySpan<byte> HasFeaturedCampaignBytes => new byte[19] { (byte)'H', (byte)'a', (byte)'s', (byte)'F', (byte)'e', (byte)'a', (byte)'t', (byte)'u', (byte)'r', (byte)'e', (byte)'d', (byte)'C', (byte)'a', (byte)'m', (byte)'p', (byte)'a', (byte)'i', (byte)'g', (byte)'n' };
        
        private bool _checkedForListActiveOrUpcomingEventConverter;
        private JsonConverter<List<ActiveOrUpcomingEvent>> _listActiveOrUpcomingEventConverter;
        private JsonConverter<List<ActiveOrUpcomingEvent>> GetListActiveOrUpcomingEventConverter(JsonSerializerOptions options)
        {
            if (!_checkedForListActiveOrUpcomingEventConverter && _listActiveOrUpcomingEventConverter == null && options != null)
            {
                _listActiveOrUpcomingEventConverter = (JsonConverter<List<ActiveOrUpcomingEvent>>)options.GetConverter(typeof(List<ActiveOrUpcomingEvent>));
                _checkedForListActiveOrUpcomingEventConverter = true;
            }
            
            return _listActiveOrUpcomingEventConverter;
        }
        
        private bool _checkedForCampaignSummaryViewModelConverter;
        private JsonConverter<CampaignSummaryViewModel> _campaignSummaryViewModelConverter;
        private JsonConverter<CampaignSummaryViewModel> GetCampaignSummaryViewModelConverter(JsonSerializerOptions options)
        {
            if (!_checkedForCampaignSummaryViewModelConverter && _campaignSummaryViewModelConverter == null && options != null)
            {
                _campaignSummaryViewModelConverter = (JsonConverter<CampaignSummaryViewModel>)options.GetConverter(typeof(CampaignSummaryViewModel));
                _checkedForCampaignSummaryViewModelConverter = true;
            }
            
            return _campaignSummaryViewModelConverter;
        }
        
        public override IndexViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.IndexViewModel value = new JsonConverterGenerator.IndexViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'ActiveOrUpcomingEvents'.
                if (ActiveOrUpcomingEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<ActiveOrUpcomingEvent>> converter = GetListActiveOrUpcomingEventConverter(options);
                    if (converter != null)
                    {
                        value.ActiveOrUpcomingEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.ActiveOrUpcomingEvents = JsonSerializer.Deserialize<List<ActiveOrUpcomingEvent>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'FeaturedCampaign'.
                else if (FeaturedCampaignBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<CampaignSummaryViewModel> converter = GetCampaignSummaryViewModelConverter(options);
                    if (converter != null)
                    {
                        value.FeaturedCampaign = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.FeaturedCampaign = JsonSerializer.Deserialize<CampaignSummaryViewModel>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'IsNewAccount'.
                else if (IsNewAccountBytes.SequenceEqual(propertyName))
                {
                    value.IsNewAccount = reader.GetBoolean();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, IndexViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(ActiveOrUpcomingEventsBytes);
            {
                JsonConverter<List<ActiveOrUpcomingEvent>> converter = GetListActiveOrUpcomingEventConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.ActiveOrUpcomingEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<ActiveOrUpcomingEvent>>(writer, value.ActiveOrUpcomingEvents, options);
                }
            }
            
            writer.WritePropertyName(FeaturedCampaignBytes);
            {
                JsonConverter<CampaignSummaryViewModel> converter = GetCampaignSummaryViewModelConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.FeaturedCampaign, options);
                }
                else
                {
                    JsonSerializer.Serialize<CampaignSummaryViewModel>(writer, value.FeaturedCampaign, options);
                }
            }
            
            writer.WriteBoolean(IsNewAccountBytes, value.IsNewAccount);
            
            writer.WriteBoolean(HasFeaturedCampaignBytes, value.HasFeaturedCampaign);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorMyEventsListerViewModel: JsonConverter<MyEventsListerViewModel>
    {
        private static ReadOnlySpan<byte> CurrentEventsBytes => new byte[13] { (byte)'C', (byte)'u', (byte)'r', (byte)'r', (byte)'e', (byte)'n', (byte)'t', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        private static ReadOnlySpan<byte> FutureEventsBytes => new byte[12] { (byte)'F', (byte)'u', (byte)'t', (byte)'u', (byte)'r', (byte)'e', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        private static ReadOnlySpan<byte> PastEventsBytes => new byte[10] { (byte)'P', (byte)'a', (byte)'s', (byte)'t', (byte)'E', (byte)'v', (byte)'e', (byte)'n', (byte)'t', (byte)'s' };
        
        private bool _checkedForListMyEventsListerItemConverter;
        private JsonConverter<List<MyEventsListerItem>> _listMyEventsListerItemConverter;
        private JsonConverter<List<MyEventsListerItem>> GetListMyEventsListerItemConverter(JsonSerializerOptions options)
        {
            if (!_checkedForListMyEventsListerItemConverter && _listMyEventsListerItemConverter == null && options != null)
            {
                _listMyEventsListerItemConverter = (JsonConverter<List<MyEventsListerItem>>)options.GetConverter(typeof(List<MyEventsListerItem>));
                _checkedForListMyEventsListerItemConverter = true;
            }
            
            return _listMyEventsListerItemConverter;
        }
        
        public override MyEventsListerViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.MyEventsListerViewModel value = new JsonConverterGenerator.MyEventsListerViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'CurrentEvents'.
                if (CurrentEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.CurrentEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.CurrentEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'FutureEvents'.
                else if (FutureEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.FutureEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.FutureEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'PastEvents'.
                else if (PastEventsBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                    if (converter != null)
                    {
                        value.PastEvents = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.PastEvents = JsonSerializer.Deserialize<List<MyEventsListerItem>>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, MyEventsListerViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(CurrentEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.CurrentEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.CurrentEvents, options);
                }
            }
            
            writer.WritePropertyName(FutureEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.FutureEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.FutureEvents, options);
                }
            }
            
            writer.WritePropertyName(PastEventsBytes);
            {
                JsonConverter<List<MyEventsListerItem>> converter = GetListMyEventsListerItemConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.PastEvents, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<MyEventsListerItem>>(writer, value.PastEvents, options);
                }
            }
            
            writer.WriteEndObject();
        }
    }
    public class JsonConverterForJsonConverterGeneratorCollectionsOfPrimitives: JsonConverter<CollectionsOfPrimitives>
    {
        private static ReadOnlySpan<byte> ByteArrayBytes => new byte[9] { (byte)'B', (byte)'y', (byte)'t', (byte)'e', (byte)'A', (byte)'r', (byte)'r', (byte)'a', (byte)'y' };
        private static ReadOnlySpan<byte> DateTimeArrayBytes => new byte[13] { (byte)'D', (byte)'a', (byte)'t', (byte)'e', (byte)'T', (byte)'i', (byte)'m', (byte)'e', (byte)'A', (byte)'r', (byte)'r', (byte)'a', (byte)'y' };
        private static ReadOnlySpan<byte> DictionaryBytes => new byte[10] { (byte)'D', (byte)'i', (byte)'c', (byte)'t', (byte)'i', (byte)'o', (byte)'n', (byte)'a', (byte)'r', (byte)'y' };
        private static ReadOnlySpan<byte> ListOfIntBytes => new byte[9] { (byte)'L', (byte)'i', (byte)'s', (byte)'t', (byte)'O', (byte)'f', (byte)'I', (byte)'n', (byte)'t' };
        
        private bool _checkedForByteArrayConverter;
        private JsonConverter<Byte[]> _byteArrayConverter;
        private JsonConverter<Byte[]> GetByteArrayConverter(JsonSerializerOptions options)
        {
            if (!_checkedForByteArrayConverter && _byteArrayConverter == null && options != null)
            {
                _byteArrayConverter = (JsonConverter<Byte[]>)options.GetConverter(typeof(Byte[]));
                _checkedForByteArrayConverter = true;
            }
            
            return _byteArrayConverter;
        }
        
        private bool _checkedForDateTimeArrayConverter;
        private JsonConverter<DateTime[]> _dateTimeArrayConverter;
        private JsonConverter<DateTime[]> GetDateTimeArrayConverter(JsonSerializerOptions options)
        {
            if (!_checkedForDateTimeArrayConverter && _dateTimeArrayConverter == null && options != null)
            {
                _dateTimeArrayConverter = (JsonConverter<DateTime[]>)options.GetConverter(typeof(DateTime[]));
                _checkedForDateTimeArrayConverter = true;
            }
            
            return _dateTimeArrayConverter;
        }
        
        private bool _checkedForDictionaryInt32StringConverter;
        private JsonConverter<Dictionary<Int32,String>> _dictionaryInt32StringConverter;
        private JsonConverter<Dictionary<Int32,String>> GetDictionaryInt32StringConverter(JsonSerializerOptions options)
        {
            if (!_checkedForDictionaryInt32StringConverter && _dictionaryInt32StringConverter == null && options != null)
            {
                _dictionaryInt32StringConverter = (JsonConverter<Dictionary<Int32,String>>)options.GetConverter(typeof(Dictionary<Int32,String>));
                _checkedForDictionaryInt32StringConverter = true;
            }
            
            return _dictionaryInt32StringConverter;
        }
        
        private bool _checkedForListInt32Converter;
        private JsonConverter<List<Int32>> _listInt32Converter;
        private JsonConverter<List<Int32>> GetListInt32Converter(JsonSerializerOptions options)
        {
            if (!_checkedForListInt32Converter && _listInt32Converter == null && options != null)
            {
                _listInt32Converter = (JsonConverter<List<Int32>>)options.GetConverter(typeof(List<Int32>));
                _checkedForListInt32Converter = true;
            }
            
            return _listInt32Converter;
        }
        
        public override CollectionsOfPrimitives Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.CollectionsOfPrimitives value = new JsonConverterGenerator.CollectionsOfPrimitives();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'ByteArray'.
                if (ByteArrayBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<Byte[]> converter = GetByteArrayConverter(options);
                    if (converter != null)
                    {
                        value.ByteArray = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.ByteArray = JsonSerializer.Deserialize<Byte[]>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'DateTimeArray'.
                else if (DateTimeArrayBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<DateTime[]> converter = GetDateTimeArrayConverter(options);
                    if (converter != null)
                    {
                        value.DateTimeArray = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.DateTimeArray = JsonSerializer.Deserialize<DateTime[]>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'Dictionary'.
                else if (DictionaryBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<Dictionary<Int32,String>> converter = GetDictionaryInt32StringConverter(options);
                    if (converter != null)
                    {
                        value.Dictionary = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.Dictionary = JsonSerializer.Deserialize<Dictionary<Int32,String>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'ListOfInt'.
                else if (ListOfIntBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<Int32>> converter = GetListInt32Converter(options);
                    if (converter != null)
                    {
                        value.ListOfInt = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.ListOfInt = JsonSerializer.Deserialize<List<Int32>>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, CollectionsOfPrimitives value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(ByteArrayBytes);
            {
                JsonConverter<Byte[]> converter = GetByteArrayConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.ByteArray, options);
                }
                else
                {
                    JsonSerializer.Serialize<Byte[]>(writer, value.ByteArray, options);
                }
            }
            
            writer.WritePropertyName(DateTimeArrayBytes);
            {
                JsonConverter<DateTime[]> converter = GetDateTimeArrayConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.DateTimeArray, options);
                }
                else
                {
                    JsonSerializer.Serialize<DateTime[]>(writer, value.DateTimeArray, options);
                }
            }
            
            writer.WritePropertyName(DictionaryBytes);
            {
                JsonConverter<Dictionary<Int32,String>> converter = GetDictionaryInt32StringConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.Dictionary, options);
                }
                else
                {
                    JsonSerializer.Serialize<Dictionary<Int32,String>>(writer, value.Dictionary, options);
                }
            }
            
            writer.WritePropertyName(ListOfIntBytes);
            {
                JsonConverter<List<Int32>> converter = GetListInt32Converter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.ListOfInt, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<Int32>>(writer, value.ListOfInt, options);
                }
            }
            
            writer.WriteEndObject();
        }
    }
}
