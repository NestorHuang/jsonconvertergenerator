//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorBasicPerson: JsonConverter<BasicPerson>
    {
        private static ReadOnlySpan<byte> AgeBytes => new byte[3] { (byte)'A', (byte)'g', (byte)'e' };
        private static ReadOnlySpan<byte> FirstBytes => new byte[5] { (byte)'F', (byte)'i', (byte)'r', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> LastBytes => new byte[4] { (byte)'L', (byte)'a', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> MiddleInitialBytes => new byte[13] { (byte)'M', (byte)'i', (byte)'d', (byte)'d', (byte)'l', (byte)'e', (byte)'I', (byte)'n', (byte)'i', (byte)'t', (byte)'i', (byte)'a', (byte)'l' };
        private static ReadOnlySpan<byte> BirthDateBytes => new byte[9] { (byte)'B', (byte)'i', (byte)'r', (byte)'t', (byte)'h', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        
        public override BasicPerson Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPerson value = new JsonConverterGenerator.BasicPerson();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Age'.
                if (AgeBytes.SequenceEqual(propertyName))
                {
                    value.Age = reader.GetInt32();
                }
                // Determine if JSON property matches 'First'.
                else if (FirstBytes.SequenceEqual(propertyName))
                {
                    value.First = reader.GetString();
                }
                // Determine if JSON property matches 'Last'.
                else if (LastBytes.SequenceEqual(propertyName))
                {
                    value.Last = reader.GetString();
                }
                // Determine if JSON property matches 'MiddleInitial'.
                else if (MiddleInitialBytes.SequenceEqual(propertyName))
                {
                    string tmp = reader.GetString();
                    if (string.IsNullOrEmpty(tmp))
                    {
                        throw new JsonException();
                    }
                    
                    value.MiddleInitial = tmp[0];
                }
                // Determine if JSON property matches 'BirthDate'.
                else if (BirthDateBytes.SequenceEqual(propertyName))
                {
                    value.BirthDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPerson value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(AgeBytes, value.Age);
            
            writer.WriteString(FirstBytes, value.First);
            
            writer.WriteString(LastBytes, value.Last);
            
            char charValue = value.MiddleInitial;
            // Assume we are running NetCore app.
            writer.WriteString(MiddleInitialBytes, MemoryMarshal.CreateSpan(ref charValue, 1));
            
            writer.WriteString(BirthDateBytes, value.BirthDate);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicJsonAddress: JsonConverter<BasicJsonAddress>
    {
        private static ReadOnlySpan<byte> StreetBytes => new byte[6] { (byte)'S', (byte)'t', (byte)'r', (byte)'e', (byte)'e', (byte)'t' };
        private static ReadOnlySpan<byte> CityBytes => new byte[4] { (byte)'C', (byte)'i', (byte)'t', (byte)'y' };
        private static ReadOnlySpan<byte> ZipBytes => new byte[3] { (byte)'Z', (byte)'i', (byte)'p' };
        
        public override BasicJsonAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicJsonAddress value = new JsonConverterGenerator.BasicJsonAddress();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Street'.
                if (StreetBytes.SequenceEqual(propertyName))
                {
                    value.Street = reader.GetString();
                }
                // Determine if JSON property matches 'City'.
                else if (CityBytes.SequenceEqual(propertyName))
                {
                    value.City = reader.GetString();
                }
                // Determine if JSON property matches 'Zip'.
                else if (ZipBytes.SequenceEqual(propertyName))
                {
                    value.Zip = reader.GetInt32();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicJsonAddress value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteString(StreetBytes, value.Street);
            
            writer.WriteString(CityBytes, value.City);
            
            writer.WriteNumber(ZipBytes, value.Zip);
            
            writer.WriteEndObject();
        }
    }
}
