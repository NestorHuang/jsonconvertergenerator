//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForActiveOrUpcomingEvent : JsonConverter<ActiveOrUpcomingEvent>
    {
        private JsonConverterForActiveOrUpcomingEvent() {}
        
        public static readonly JsonConverterForActiveOrUpcomingEvent Instance = new JsonConverterForActiveOrUpcomingEvent();
        
        private static ReadOnlySpan<byte> IdBytes => new byte[2] { (byte)'I', (byte)'d' };
        private static ReadOnlySpan<byte> ImageUrlBytes => new byte[8] { (byte)'I', (byte)'m', (byte)'a', (byte)'g', (byte)'e', (byte)'U', (byte)'r', (byte)'l' };
        private static ReadOnlySpan<byte> NameBytes => new byte[4] { (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> CampaignNameBytes => new byte[12] { (byte)'C', (byte)'a', (byte)'m', (byte)'p', (byte)'a', (byte)'i', (byte)'g', (byte)'n', (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> CampaignManagedOrganizerNameBytes => new byte[28] { (byte)'C', (byte)'a', (byte)'m', (byte)'p', (byte)'a', (byte)'i', (byte)'g', (byte)'n', (byte)'M', (byte)'a', (byte)'n', (byte)'a', (byte)'g', (byte)'e', (byte)'d', (byte)'O', (byte)'r', (byte)'g', (byte)'a', (byte)'n', (byte)'i', (byte)'z', (byte)'e', (byte)'r', (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> DescriptionBytes => new byte[11] { (byte)'D', (byte)'e', (byte)'s', (byte)'c', (byte)'r', (byte)'i', (byte)'p', (byte)'t', (byte)'i', (byte)'o', (byte)'n' };
        private static ReadOnlySpan<byte> StartDateBytes => new byte[9] { (byte)'S', (byte)'t', (byte)'a', (byte)'r', (byte)'t', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        private static ReadOnlySpan<byte> EndDateBytes => new byte[7] { (byte)'E', (byte)'n', (byte)'d', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        
        public override ActiveOrUpcomingEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            ActiveOrUpcomingEvent value = new ActiveOrUpcomingEvent();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Id'.
                if (IdBytes.SequenceEqual(propertyName))
                {
                    value.Id = reader.GetInt32();
                }
                // Determine if JSON property matches 'ImageUrl'.
                else if (ImageUrlBytes.SequenceEqual(propertyName))
                {
                    value.ImageUrl = reader.GetString();
                }
                // Determine if JSON property matches 'Name'.
                else if (NameBytes.SequenceEqual(propertyName))
                {
                    value.Name = reader.GetString();
                }
                // Determine if JSON property matches 'CampaignName'.
                else if (CampaignNameBytes.SequenceEqual(propertyName))
                {
                    value.CampaignName = reader.GetString();
                }
                // Determine if JSON property matches 'CampaignManagedOrganizerName'.
                else if (CampaignManagedOrganizerNameBytes.SequenceEqual(propertyName))
                {
                    value.CampaignManagedOrganizerName = reader.GetString();
                }
                // Determine if JSON property matches 'Description'.
                else if (DescriptionBytes.SequenceEqual(propertyName))
                {
                    value.Description = reader.GetString();
                }
                // Determine if JSON property matches 'StartDate'.
                else if (StartDateBytes.SequenceEqual(propertyName))
                {
                    value.StartDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'EndDate'.
                else if (EndDateBytes.SequenceEqual(propertyName))
                {
                    value.EndDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, ActiveOrUpcomingEvent value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(IdBytes, value.Id);
            
            writer.WriteString(ImageUrlBytes, value.ImageUrl);
            
            writer.WriteString(NameBytes, value.Name);
            
            writer.WriteString(CampaignNameBytes, value.CampaignName);
            
            writer.WriteString(CampaignManagedOrganizerNameBytes, value.CampaignManagedOrganizerName);
            
            writer.WriteString(DescriptionBytes, value.Description);
            
            writer.WriteString(StartDateBytes, value.StartDate);
            
            writer.WriteString(EndDateBytes, value.EndDate);
            
            writer.WriteEndObject();
        }
    }
}
