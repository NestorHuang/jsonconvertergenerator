//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorBasicPerson: JsonConverter<BasicPerson>
    {
        private static ReadOnlySpan<byte> AgeBytes => new byte[3] { (byte)'A', (byte)'g', (byte)'e' };
        private static ReadOnlySpan<byte> FirstBytes => new byte[5] { (byte)'F', (byte)'i', (byte)'r', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> LastBytes => new byte[4] { (byte)'L', (byte)'a', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> MiddleInitialBytes => new byte[13] { (byte)'M', (byte)'i', (byte)'d', (byte)'d', (byte)'l', (byte)'e', (byte)'I', (byte)'n', (byte)'i', (byte)'t', (byte)'i', (byte)'a', (byte)'l' };
        private static ReadOnlySpan<byte> BirthDateBytes => new byte[9] { (byte)'B', (byte)'i', (byte)'r', (byte)'t', (byte)'h', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        
        public override BasicPerson Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPerson value = new JsonConverterGenerator.BasicPerson();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Age'.
                if (AgeBytes.SequenceEqual(propertyName))
                {
                    value.Age = reader.GetInt32();
                }
                // Determine if JSON property matches 'First'.
                else if (FirstBytes.SequenceEqual(propertyName))
                {
                    value.First = reader.GetString();
                }
                // Determine if JSON property matches 'Last'.
                else if (LastBytes.SequenceEqual(propertyName))
                {
                    value.Last = reader.GetString();
                }
                // Determine if JSON property matches 'MiddleInitial'.
                else if (MiddleInitialBytes.SequenceEqual(propertyName))
                {
                    string tmp = reader.GetString();
                    if (string.IsNullOrEmpty(tmp))
                    {
                        throw new JsonException();
                    }
                    
                    value.MiddleInitial = tmp[0];
                }
                // Determine if JSON property matches 'BirthDate'.
                else if (BirthDateBytes.SequenceEqual(propertyName))
                {
                    value.BirthDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPerson value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(AgeBytes, value.Age);
            
            writer.WriteString(FirstBytes, value.First);
            
            writer.WriteString(LastBytes, value.Last);
            
            char charValue = value.MiddleInitial;
            // Assume we are running NetCore app.
            writer.WriteString(MiddleInitialBytes, MemoryMarshal.CreateSpan(ref charValue, 1));
            
            writer.WriteString(BirthDateBytes, value.BirthDate);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicPersonWithCollections: JsonConverter<BasicPersonWithCollections>
    {
        private static ReadOnlySpan<byte> AgeBytes => new byte[3] { (byte)'A', (byte)'g', (byte)'e' };
        private static ReadOnlySpan<byte> FirstBytes => new byte[5] { (byte)'F', (byte)'i', (byte)'r', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> RandomDataBytes => new byte[10] { (byte)'R', (byte)'a', (byte)'n', (byte)'d', (byte)'o', (byte)'m', (byte)'D', (byte)'a', (byte)'t', (byte)'a' };
        private static ReadOnlySpan<byte> LastBytes => new byte[4] { (byte)'L', (byte)'a', (byte)'s', (byte)'t' };
        private static ReadOnlySpan<byte> MiddleInitialBytes => new byte[13] { (byte)'M', (byte)'i', (byte)'d', (byte)'d', (byte)'l', (byte)'e', (byte)'I', (byte)'n', (byte)'i', (byte)'t', (byte)'i', (byte)'a', (byte)'l' };
        private static ReadOnlySpan<byte> BirthDateBytes => new byte[9] { (byte)'B', (byte)'i', (byte)'r', (byte)'t', (byte)'h', (byte)'D', (byte)'a', (byte)'t', (byte)'e' };
        private static ReadOnlySpan<byte> OtherNameBytes => new byte[9] { (byte)'O', (byte)'t', (byte)'h', (byte)'e', (byte)'r', (byte)'N', (byte)'a', (byte)'m', (byte)'e' };
        private static ReadOnlySpan<byte> PhoneNumbersBytes => new byte[12] { (byte)'P', (byte)'h', (byte)'o', (byte)'n', (byte)'e', (byte)'N', (byte)'u', (byte)'m', (byte)'b', (byte)'e', (byte)'r', (byte)'s' };
        
        private bool _checkedForISetListDictionaryStringInt32Converter;
        private JsonConverter<ISet<List<Dictionary<String,Int32>>>> _iSetListDictionaryStringInt32Converter;
        private JsonConverter<ISet<List<Dictionary<String,Int32>>>> GetISetListDictionaryStringInt32Converter(JsonSerializerOptions options)
        {
            if (!_checkedForISetListDictionaryStringInt32Converter && _iSetListDictionaryStringInt32Converter == null && options != null)
            {
                _iSetListDictionaryStringInt32Converter = (JsonConverter<ISet<List<Dictionary<String,Int32>>>>)options.GetConverter(typeof(ISet<List<Dictionary<String,Int32>>>));
                _checkedForISetListDictionaryStringInt32Converter = true;
            }
            
            return _iSetListDictionaryStringInt32Converter;
        }
        
        private bool _checkedForListStringConverter;
        private JsonConverter<List<String>> _listStringConverter;
        private JsonConverter<List<String>> GetListStringConverter(JsonSerializerOptions options)
        {
            if (!_checkedForListStringConverter && _listStringConverter == null && options != null)
            {
                _listStringConverter = (JsonConverter<List<String>>)options.GetConverter(typeof(List<String>));
                _checkedForListStringConverter = true;
            }
            
            return _listStringConverter;
        }
        
        private bool _checkedForDictionaryStringInt32Converter;
        private JsonConverter<Dictionary<String,Int32>> _dictionaryStringInt32Converter;
        private JsonConverter<Dictionary<String,Int32>> GetDictionaryStringInt32Converter(JsonSerializerOptions options)
        {
            if (!_checkedForDictionaryStringInt32Converter && _dictionaryStringInt32Converter == null && options != null)
            {
                _dictionaryStringInt32Converter = (JsonConverter<Dictionary<String,Int32>>)options.GetConverter(typeof(Dictionary<String,Int32>));
                _checkedForDictionaryStringInt32Converter = true;
            }
            
            return _dictionaryStringInt32Converter;
        }
        
        public override BasicPersonWithCollections Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPersonWithCollections value = new JsonConverterGenerator.BasicPersonWithCollections();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Age'.
                if (AgeBytes.SequenceEqual(propertyName))
                {
                    value.Age = reader.GetInt32();
                }
                // Determine if JSON property matches 'First'.
                else if (FirstBytes.SequenceEqual(propertyName))
                {
                    value.First = reader.GetString();
                }
                // Determine if JSON property matches 'RandomData'.
                else if (RandomDataBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<ISet<List<Dictionary<String,Int32>>>> converter = GetISetListDictionaryStringInt32Converter(options);
                    if (converter != null)
                    {
                        value.RandomData = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.RandomData = JsonSerializer.Deserialize<ISet<List<Dictionary<String,Int32>>>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'Last'.
                else if (LastBytes.SequenceEqual(propertyName))
                {
                    value.Last = reader.GetString();
                }
                // Determine if JSON property matches 'MiddleInitial'.
                else if (MiddleInitialBytes.SequenceEqual(propertyName))
                {
                    string tmp = reader.GetString();
                    if (string.IsNullOrEmpty(tmp))
                    {
                        throw new JsonException();
                    }
                    
                    value.MiddleInitial = tmp[0];
                }
                // Determine if JSON property matches 'BirthDate'.
                else if (BirthDateBytes.SequenceEqual(propertyName))
                {
                    value.BirthDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'OtherName'.
                else if (OtherNameBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<List<String>> converter = GetListStringConverter(options);
                    if (converter != null)
                    {
                        value.OtherName = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.OtherName = JsonSerializer.Deserialize<List<String>>(ref reader, options);
                    }
                }
                // Determine if JSON property matches 'PhoneNumbers'.
                else if (PhoneNumbersBytes.SequenceEqual(propertyName))
                {
                    JsonConverter<Dictionary<String,Int32>> converter = GetDictionaryStringInt32Converter(options);
                    if (converter != null)
                    {
                        value.PhoneNumbers = converter.Read(ref reader, typeToConvert, options);
                    }
                    else
                    {
                        value.PhoneNumbers = JsonSerializer.Deserialize<Dictionary<String,Int32>>(ref reader, options);
                    }
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPersonWithCollections value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(AgeBytes, value.Age);
            
            writer.WriteString(FirstBytes, value.First);
            
            writer.WritePropertyName(RandomDataBytes);
            {
                JsonConverter<ISet<List<Dictionary<String,Int32>>>> converter = GetISetListDictionaryStringInt32Converter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.RandomData, options);
                }
                else
                {
                    JsonSerializer.Serialize<ISet<List<Dictionary<String,Int32>>>>(writer, value.RandomData, options);
                }
            }
            
            writer.WriteString(LastBytes, value.Last);
            
            char charValue = value.MiddleInitial;
            // Assume we are running NetCore app.
            writer.WriteString(MiddleInitialBytes, MemoryMarshal.CreateSpan(ref charValue, 1));
            
            writer.WriteString(BirthDateBytes, value.BirthDate);
            
            writer.WritePropertyName(OtherNameBytes);
            {
                JsonConverter<List<String>> converter = GetListStringConverter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.OtherName, options);
                }
                else
                {
                    JsonSerializer.Serialize<List<String>>(writer, value.OtherName, options);
                }
            }
            
            writer.WritePropertyName(PhoneNumbersBytes);
            {
                JsonConverter<Dictionary<String,Int32>> converter = GetDictionaryStringInt32Converter(options);
                if (converter != null)
                {
                    converter.Write(writer, value.PhoneNumbers, options);
                }
                else
                {
                    JsonSerializer.Serialize<Dictionary<String,Int32>>(writer, value.PhoneNumbers, options);
                }
            }
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicJsonAddress: JsonConverter<BasicJsonAddress>
    {
        private static ReadOnlySpan<byte> StreetBytes => new byte[6] { (byte)'S', (byte)'t', (byte)'r', (byte)'e', (byte)'e', (byte)'t' };
        private static ReadOnlySpan<byte> CityBytes => new byte[4] { (byte)'C', (byte)'i', (byte)'t', (byte)'y' };
        private static ReadOnlySpan<byte> ZipBytes => new byte[3] { (byte)'Z', (byte)'i', (byte)'p' };
        
        public override BasicJsonAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicJsonAddress value = new JsonConverterGenerator.BasicJsonAddress();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Street'.
                if (StreetBytes.SequenceEqual(propertyName))
                {
                    value.Street = reader.GetString();
                }
                // Determine if JSON property matches 'City'.
                else if (CityBytes.SequenceEqual(propertyName))
                {
                    value.City = reader.GetString();
                }
                // Determine if JSON property matches 'Zip'.
                else if (ZipBytes.SequenceEqual(propertyName))
                {
                    value.Zip = reader.GetInt32();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicJsonAddress value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteString(StreetBytes, value.Street);
            
            writer.WriteString(CityBytes, value.City);
            
            writer.WriteNumber(ZipBytes, value.Zip);
            
            writer.WriteEndObject();
        }
    }
}
