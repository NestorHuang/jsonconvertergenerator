//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public class JsonConverterForJsonConverterGeneratorBasicPerson: JsonConverter<BasicPerson>
    {
        public override BasicPerson Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicPerson value = new JsonConverterGenerator.BasicPerson();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Age'.
                if (propertyName.Length == 3 && propertyName[0] == (byte)'A' && propertyName[1] == (byte)'g' && propertyName[2] == (byte)'e')
                {
                    value.Age = reader.GetInt32();
                }
                // Determine if JSON property matches 'First'.
                else if (propertyName.Length == 5 && propertyName[0] == (byte)'F' && propertyName[1] == (byte)'i' && propertyName[2] == (byte)'r' && propertyName[3] == (byte)'s' && propertyName[4] == (byte)'t')
                {
                    value.First = reader.GetString();
                }
                // Determine if JSON property matches 'Last'.
                else if (propertyName.Length == 4 && propertyName[0] == (byte)'L' && propertyName[1] == (byte)'a' && propertyName[2] == (byte)'s' && propertyName[3] == (byte)'t')
                {
                    value.Last = reader.GetString();
                }
                // Determine if JSON property matches 'MiddleInitial'.
                else if (propertyName.Length == 13 && propertyName[0] == (byte)'M' && propertyName[1] == (byte)'i' && propertyName[2] == (byte)'d' && propertyName[3] == (byte)'d' && propertyName[4] == (byte)'l' && propertyName[5] == (byte)'e' && propertyName[6] == (byte)'I' && propertyName[7] == (byte)'n' && propertyName[8] == (byte)'i' && propertyName[9] == (byte)'t' && propertyName[10] == (byte)'i' && propertyName[11] == (byte)'a' && propertyName[12] == (byte)'l')
                {
                    string tmp = reader.GetString();
                    if (string.IsNullOrEmpty(tmp))
                    {
                        throw new JsonException();
                    }
                    
                    value.MiddleInitial = tmp[0];
                }
                // Determine if JSON property matches 'BirthDate'.
                else if (propertyName.Length == 9 && propertyName[0] == (byte)'B' && propertyName[1] == (byte)'i' && propertyName[2] == (byte)'r' && propertyName[3] == (byte)'t' && propertyName[4] == (byte)'h' && propertyName[5] == (byte)'D' && propertyName[6] == (byte)'a' && propertyName[7] == (byte)'t' && propertyName[8] == (byte)'e')
                {
                    value.BirthDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicPerson value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber("Age", value.Age);
            
            writer.WriteString("First", value.First);
            
            writer.WriteString("Last", value.Last);
            
            char charValue = value.MiddleInitial;
            // Assume we are running NetCore app.
            writer.WriteString("MiddleInitial", MemoryMarshal.CreateSpan(ref charValue, 1));
            
            writer.WriteString("BirthDate", value.BirthDate);
            
            writer.WriteEndObject();
        }
    }
    
    public class JsonConverterForJsonConverterGeneratorBasicJsonAddress: JsonConverter<BasicJsonAddress>
    {
        public override BasicJsonAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            JsonConverterGenerator.BasicJsonAddress value = new JsonConverterGenerator.BasicJsonAddress();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Street'.
                if (propertyName.Length == 6 && propertyName[0] == (byte)'S' && propertyName[1] == (byte)'t' && propertyName[2] == (byte)'r' && propertyName[3] == (byte)'e' && propertyName[4] == (byte)'e' && propertyName[5] == (byte)'t')
                {
                    value.Street = reader.GetString();
                }
                // Determine if JSON property matches 'City'.
                else if (propertyName.Length == 4 && propertyName[0] == (byte)'C' && propertyName[1] == (byte)'i' && propertyName[2] == (byte)'t' && propertyName[3] == (byte)'y')
                {
                    value.City = reader.GetString();
                }
                // Determine if JSON property matches 'Zip'.
                else if (propertyName.Length == 3 && propertyName[0] == (byte)'Z' && propertyName[1] == (byte)'i' && propertyName[2] == (byte)'p')
                {
                    value.Zip = reader.GetInt32();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, BasicJsonAddress value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteString("Street", value.Street);
            
            writer.WriteString("City", value.City);
            
            writer.WriteNumber("Zip", value.Zip);
            
            writer.WriteEndObject();
        }
    }
}
